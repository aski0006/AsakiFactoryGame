// <auto-generated />
#nullable enable
using System;
using System.Collections.Generic;
using Game.ScriptableObjectDB.CSV;
using Game.CSV;
#if UNITY_EDITOR
using UnityEditor;
#endif
namespace Game.Data.Definition.Items {
public partial class BaseItemSection : ICsvImportableConfig, ICsvExportableConfig
{
    public IReadOnlyList<string> GetExpectedColumns() => CsvBinding_BaseItemDefinition.Header;
    public IReadOnlyList<string> GetCsvHeader() => CsvBinding_BaseItemDefinition.Header;
    public void PrepareForCsvImport(bool clearExisting)
    {
#if UNITY_EDITOR
        if (clearExisting) definitions.Clear();
#endif
    }
    public bool ImportCsvRow(Dictionary<string,string> row, ICsvImportHelper helper, int lineIndex)
    {
#if UNITY_EDITOR
        try
        {
            if (!row.TryGetValue("id", out var idStr) || string.IsNullOrWhiteSpace(idStr) || !int.TryParse(idStr,out var idVal))
                return false;
            BaseItemDefinition target = null;
            for (int i = 0; i < definitions.Count; i++)
            {
                var d = definitions[i].definition;
                if (d != null && d.Id == idVal) { target = d; break; }
            }
            if (target == null)
            {
                target = new BaseItemDefinition();
                definitions.Add(new DefinitionItem{ definition = target, description = ""});
            }
            CsvBinding_BaseItemDefinition.ImportInto(target, row, AssetCsvResolver.Instance, lineIndex);
            return true;
        }
        catch (Exception e)
        {
            helper.LogError(lineIndex, e.Message);
            return false;
        }
#else
        return false;
#endif
    }
    public void FinalizeCsvImport(int success, int error)
    {
#if UNITY_EDITOR
        definitions.Sort((a,b)=>
        {
            if (a?.definition == null || b?.definition == null) return 0;
            return a.definition.Id.CompareTo(b.definition.Id);
        });
        EditorUtility.SetDirty(this);
#endif
    }
    public IEnumerable<Dictionary<string,string>> ExportCsvRows()
    {
        foreach (var di in definitions)
        {
            if (di?.definition == null) continue;
            yield return CsvBinding_BaseItemDefinition.Export(di.definition);
        }
    }
}
}
