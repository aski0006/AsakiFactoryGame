// <auto-generated />
#nullable enable
using UnityEditor;
using System;
using System.Collections.Generic;
using UnityEngine;
using System.Linq;
using Game.CSV;
namespace Game.Data.Definition.Items {
internal static class CsvBinding_BaseItemDefinition
{
    internal static readonly string[] Header = new[]{
        "id",
        "codeName",
        "displayName",
        "category",
        "rarity",
        "sortOrder",
        "maxStack",
        "droppable",
        "storable",
        "baseValue",
        "unlockTier",
        "iconGuid",
        "description",
        "tags"
    };
    internal static readonly string[] Remarks = new[]{
        "唯一ID",
        "内部代码名",
        "显示名称",
        "物品分类",
        "稀有度",
        "排序权重",
        "最大堆叠",
        "可丢弃",
        "可进通用背包",
        "基础价值",
        "解锁层级",
        "图标GUID",
        "描述",
        "标签(分号;分隔)"
    };
    internal static Dictionary<string,string> Export(BaseItemDefinition def)
    {
        var d = new Dictionary<string,string>(StringComparer.OrdinalIgnoreCase);
        d["id"] = def.Id.ToString();
        d["codeName"] = def.CodeName ?? "";
        d["displayName"] = def.DisplayName ?? "";
        d["category"] = def.Category.ToString();
        d["rarity"] = def.Rarity.ToString();
        d["sortOrder"] = def.SortOrder.ToString();
        d["maxStack"] = def.MaxStack.ToString();
        d["droppable"] = def.Droppable ? "true" : "false";
        d["storable"] = def.Storable ? "true" : "false";
        d["baseValue"] = def.BaseValue.ToString();
        d["unlockTier"] = def.UnlockTier.ToString();
#if UNITY_EDITOR
        if (def.Icon != null) {
            var p = AssetDatabase.GetAssetPath(def.Icon);
            d["iconGuid"] = string.IsNullOrEmpty(p) ? "" : AssetDatabase.AssetPathToGUID(p);
        } else d["iconGuid"] = "";
#else
        d["iconGuid"] = "";
#endif
        d["description"] = def.Description ?? "";
        d["tags"] = def.Tags != null ? string.Join(";", def.Tags) : "";
        return d;
    }
#if UNITY_EDITOR
    internal static void ImportInto(BaseItemDefinition target, Dictionary<string,string> row, IAssetCsvResolver resolver, int lineIndex)
    {
        if (row.TryGetValue("id", out var v_id))
        {
            if (v_id == null) v_id = string.Empty;
            if (int.TryParse(v_id, out var parsed)) target.__CsvSet_id(parsed);
        }

        if (row.TryGetValue("codeName", out var v_codeName))
        {
            if (v_codeName == null) v_codeName = string.Empty;
            if(!string.IsNullOrEmpty(v_codeName)) target.__CsvSet_codeName(v_codeName);
        }

        if (row.TryGetValue("displayName", out var v_displayName))
        {
            if (v_displayName == null) v_displayName = string.Empty;
            if(!string.IsNullOrEmpty(v_displayName)) target.__CsvSet_displayName(v_displayName);
        }

        if (row.TryGetValue("category", out var v_category))
        {
            if (v_category == null) v_category = string.Empty;
            if (System.Enum.TryParse(typeof(ItemCategory), v_category, true, out var enumObj)) target.__CsvSet_category((ItemCategory)enumObj);
        }

        if (row.TryGetValue("rarity", out var v_rarity))
        {
            if (v_rarity == null) v_rarity = string.Empty;
            if (System.Enum.TryParse(typeof(ItemRarity), v_rarity, true, out var enumObj)) target.__CsvSet_rarity((ItemRarity)enumObj);
        }

        if (row.TryGetValue("sortOrder", out var v_sortOrder))
        {
            if (v_sortOrder == null) v_sortOrder = string.Empty;
            if (int.TryParse(v_sortOrder, out var parsed)) target.__CsvSet_sortOrder(parsed);
        }

        if (row.TryGetValue("maxStack", out var v_maxStack))
        {
            if (v_maxStack == null) v_maxStack = string.Empty;
            if (int.TryParse(v_maxStack, out var parsed)) target.__CsvSet_maxStack(parsed);
        }

        if (row.TryGetValue("droppable", out var v_droppable))
        {
            if (v_droppable == null) v_droppable = string.Empty;
            target.__CsvSet_droppable((v_droppable.Equals("1") || v_droppable.Equals("true", StringComparison.OrdinalIgnoreCase) || v_droppable.Equals("yes", StringComparison.OrdinalIgnoreCase)));
        }

        if (row.TryGetValue("storable", out var v_storable))
        {
            if (v_storable == null) v_storable = string.Empty;
            target.__CsvSet_storable((v_storable.Equals("1") || v_storable.Equals("true", StringComparison.OrdinalIgnoreCase) || v_storable.Equals("yes", StringComparison.OrdinalIgnoreCase)));
        }

        if (row.TryGetValue("baseValue", out var v_baseValue))
        {
            if (v_baseValue == null) v_baseValue = string.Empty;
            if (int.TryParse(v_baseValue, out var parsed)) target.__CsvSet_baseValue(parsed);
        }

        if (row.TryGetValue("unlockTier", out var v_unlockTier))
        {
            if (v_unlockTier == null) v_unlockTier = string.Empty;
            if (int.TryParse(v_unlockTier, out var parsed)) target.__CsvSet_unlockTier(parsed);
        }

        if (row.TryGetValue("iconGuid", out var v_icon))
        {
            if (v_icon == null) v_icon = string.Empty;
            if (!string.IsNullOrWhiteSpace(v_icon))
            {
                var sp = resolver.LoadSpriteByGuid(v_icon.Trim());
                target.__CsvSet_icon(sp);
            }
            else target.__CsvSet_icon(null);
        }

        if (row.TryGetValue("description", out var v_description))
        {
            if (v_description == null) v_description = string.Empty;
            if(!string.IsNullOrEmpty(v_description)) target.__CsvSet_description(v_description);
        }

        if (row.TryGetValue("tags", out var v_tags))
        {
            if (v_tags == null) v_tags = string.Empty;
            var arr = string.IsNullOrWhiteSpace(v_tags)
                ? System.Array.Empty<string>()
                : v_tags.Split(new[]{';'}, StringSplitOptions.RemoveEmptyEntries)
                    .Select(s=>s.Trim()).Where(s=>s.Length>0).Distinct().ToArray();
            target.__CsvSet_tags(arr);
        }

    }
#endif
}
}
