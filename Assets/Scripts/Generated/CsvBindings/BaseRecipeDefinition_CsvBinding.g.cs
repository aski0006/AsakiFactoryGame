// <auto-generated />
#nullable enable
using UnityEditor;
using System;
using System.Collections.Generic;
using UnityEngine;
using System.Linq;
using Game.CSV;
namespace Game.Data.Definition.Recipes {
internal static class CsvBinding_BaseRecipeDefinition
{
    internal static readonly string[] Header = new[]{
        "id",
        "codeName",
        "displayName",
        "inputs",
        "outputs",
        "timeSeconds",
        "machineType",
        "allowHandCraft",
        "batchLimit",
        "consumeInputsAtStart",
        "unlockTier",
        "unlockedByDefault",
        "description",
        "tags",
        "energyCost",
        "xpReward"
    };
    internal static readonly string[] Remarks = new[]{
        "唯一ID",
        "内部代码名",
        "显示名称",
        "输入(ItemId:数量,逗号分隔)",
        "输出(ItemId:数量,逗号分隔)",
        "耗时秒",
        "机器类型",
        "允许手搓",
        "批量上限",
        "开始即消耗",
        "解锁层级",
        "默认解锁",
        "描述",
        "标签(分号;)",
        "能量消耗",
        "经验奖励"
    };
    internal static Dictionary<string,string> Export(BaseRecipeDefinition def)
    {
        var d = new Dictionary<string,string>(StringComparer.OrdinalIgnoreCase);
        d["id"] = def.Id.ToString();
        d["codeName"] = def.CodeName ?? "";
        d["displayName"] = def.DisplayName ?? "";
        if (def.Inputs != null)
        {
            var arr = def.Inputs;
            if (arr.Length == 0) d["inputs"] = "";
            else {
                System.Text.StringBuilder __sb = new System.Text.StringBuilder();
                for (int __i = 0; __i < arr.Length; __i++)
                {
                    var __e = arr[__i];
                    string __s;
                    if (CsvTypeConverterRegistry.TrySerialize(typeof(Game.Data.Definition.Recipes.ItemStack), __e, out __s))
                    {
                        if (__i > 0) __sb.Append(',');
                        __sb.Append(__s);
                    }
                    else
                    {
                        // 回退 ToString
                        if (__i > 0) __sb.Append(',');
                        __sb.Append(__e.ToString());
                    }
                }
                d["inputs"] = __sb.ToString();
            }
        }
        else d["inputs"] = "";
        if (def.Outputs != null)
        {
            var arr = def.Outputs;
            if (arr.Length == 0) d["outputs"] = "";
            else {
                System.Text.StringBuilder __sb = new System.Text.StringBuilder();
                for (int __i = 0; __i < arr.Length; __i++)
                {
                    var __e = arr[__i];
                    string __s;
                    if (CsvTypeConverterRegistry.TrySerialize(typeof(Game.Data.Definition.Recipes.ItemStack), __e, out __s))
                    {
                        if (__i > 0) __sb.Append(',');
                        __sb.Append(__s);
                    }
                    else
                    {
                        // 回退 ToString
                        if (__i > 0) __sb.Append(',');
                        __sb.Append(__e.ToString());
                    }
                }
                d["outputs"] = __sb.ToString();
            }
        }
        else d["outputs"] = "";
        d["timeSeconds"] = def.TimeSeconds.ToString();
        d["machineType"] = def.MachineType.ToString();
        d["allowHandCraft"] = def.AllowHandCraft ? "true" : "false";
        d["batchLimit"] = def.BatchLimit.ToString();
        d["consumeInputsAtStart"] = def.ConsumeInputsAtStart ? "true" : "false";
        d["unlockTier"] = def.UnlockTier.ToString();
        d["unlockedByDefault"] = def.UnlockedByDefault ? "true" : "false";
        d["description"] = def.Description ?? "";
        d["tags"] = def.Tags != null ? string.Join(";", def.Tags) : "";
        d["energyCost"] = def.EnergyCost.ToString();
        d["xpReward"] = def.XpReward.ToString();
        return d;
    }
#if UNITY_EDITOR
    internal static void ImportInto(BaseRecipeDefinition target, Dictionary<string,string> row, IAssetCsvResolver resolver, int lineIndex)
    {
        if (row.TryGetValue("id", out var v_id))
        {
            if (v_id == null) v_id = string.Empty;
            if (int.TryParse(v_id, out var parsed)) target.__CsvSet_id(parsed);
        }

        if (row.TryGetValue("codeName", out var v_codeName))
        {
            if (v_codeName == null) v_codeName = string.Empty;
            if(!string.IsNullOrEmpty(v_codeName)) target.__CsvSet_codeName(v_codeName);
        }

        if (row.TryGetValue("displayName", out var v_displayName))
        {
            if (v_displayName == null) v_displayName = string.Empty;
            if(!string.IsNullOrEmpty(v_displayName)) target.__CsvSet_displayName(v_displayName);
        }

        if (row.TryGetValue("inputs", out var v_inputs))
        {
            if (v_inputs == null) v_inputs = string.Empty;
            if (string.IsNullOrWhiteSpace(v_inputs)) {
                target.__CsvSet_inputs(System.Array.Empty<Game.Data.Definition.Recipes.ItemStack>());
            } else {
                var _parts = v_inputs.Split(new[]{','}, StringSplitOptions.RemoveEmptyEntries);
                var _list = new System.Collections.Generic.List<Game.Data.Definition.Recipes.ItemStack>(_parts.Length);
                for (int __i = 0; __i < _parts.Length; __i++)
                {
                    var __token = _parts[__i].Trim();
                    if (CsvTypeConverterRegistry.TryDeserialize(typeof(Game.Data.Definition.Recipes.ItemStack), __token, out var __obj))
                    {
                        _list.Add( (Game.Data.Definition.Recipes.ItemStack)__obj );
                    }
                    else
                    {
                        // 尝试直接 Parse 数字到元素(若是基础数值)或忽略（可按需要扩展）
                        // 没有转换器则跳过
                    }
                }
                target.__CsvSet_inputs(_list.ToArray());
            }
        }

        if (row.TryGetValue("outputs", out var v_outputs))
        {
            if (v_outputs == null) v_outputs = string.Empty;
            if (string.IsNullOrWhiteSpace(v_outputs)) {
                target.__CsvSet_outputs(System.Array.Empty<Game.Data.Definition.Recipes.ItemStack>());
            } else {
                var _parts = v_outputs.Split(new[]{','}, StringSplitOptions.RemoveEmptyEntries);
                var _list = new System.Collections.Generic.List<Game.Data.Definition.Recipes.ItemStack>(_parts.Length);
                for (int __i = 0; __i < _parts.Length; __i++)
                {
                    var __token = _parts[__i].Trim();
                    if (CsvTypeConverterRegistry.TryDeserialize(typeof(Game.Data.Definition.Recipes.ItemStack), __token, out var __obj))
                    {
                        _list.Add( (Game.Data.Definition.Recipes.ItemStack)__obj );
                    }
                    else
                    {
                        // 尝试直接 Parse 数字到元素(若是基础数值)或忽略（可按需要扩展）
                        // 没有转换器则跳过
                    }
                }
                target.__CsvSet_outputs(_list.ToArray());
            }
        }

        if (row.TryGetValue("timeSeconds", out var v_timeSeconds))
        {
            if (v_timeSeconds == null) v_timeSeconds = string.Empty;
            if (float.TryParse(v_timeSeconds, out var parsed)) target.__CsvSet_timeSeconds(parsed);
        }

        if (row.TryGetValue("machineType", out var v_machineType))
        {
            if (v_machineType == null) v_machineType = string.Empty;
            if (System.Enum.TryParse(typeof(Game.Data.Definition.Machines.MachineType), v_machineType, true, out var enumObj)) target.__CsvSet_machineType((Game.Data.Definition.Machines.MachineType)enumObj);
        }

        if (row.TryGetValue("allowHandCraft", out var v_allowHandCraft))
        {
            if (v_allowHandCraft == null) v_allowHandCraft = string.Empty;
            target.__CsvSet_allowHandCraft((v_allowHandCraft.Equals("1") || v_allowHandCraft.Equals("true", StringComparison.OrdinalIgnoreCase) || v_allowHandCraft.Equals("yes", StringComparison.OrdinalIgnoreCase)));
        }

        if (row.TryGetValue("batchLimit", out var v_batchLimit))
        {
            if (v_batchLimit == null) v_batchLimit = string.Empty;
            if (int.TryParse(v_batchLimit, out var parsed)) target.__CsvSet_batchLimit(parsed);
        }

        if (row.TryGetValue("consumeInputsAtStart", out var v_consumeInputsAtStart))
        {
            if (v_consumeInputsAtStart == null) v_consumeInputsAtStart = string.Empty;
            target.__CsvSet_consumeInputsAtStart((v_consumeInputsAtStart.Equals("1") || v_consumeInputsAtStart.Equals("true", StringComparison.OrdinalIgnoreCase) || v_consumeInputsAtStart.Equals("yes", StringComparison.OrdinalIgnoreCase)));
        }

        if (row.TryGetValue("unlockTier", out var v_unlockTier))
        {
            if (v_unlockTier == null) v_unlockTier = string.Empty;
            if (int.TryParse(v_unlockTier, out var parsed)) target.__CsvSet_unlockTier(parsed);
        }

        if (row.TryGetValue("unlockedByDefault", out var v_unlockedByDefault))
        {
            if (v_unlockedByDefault == null) v_unlockedByDefault = string.Empty;
            target.__CsvSet_unlockedByDefault((v_unlockedByDefault.Equals("1") || v_unlockedByDefault.Equals("true", StringComparison.OrdinalIgnoreCase) || v_unlockedByDefault.Equals("yes", StringComparison.OrdinalIgnoreCase)));
        }

        if (row.TryGetValue("description", out var v_description))
        {
            if (v_description == null) v_description = string.Empty;
            if(!string.IsNullOrEmpty(v_description)) target.__CsvSet_description(v_description);
        }

        if (row.TryGetValue("tags", out var v_tags))
        {
            if (v_tags == null) v_tags = string.Empty;
            var arr = string.IsNullOrWhiteSpace(v_tags)
                ? System.Array.Empty<string>()
                : v_tags.Split(new[]{';'}, StringSplitOptions.RemoveEmptyEntries)
                    .Select(s=>s.Trim()).Where(s=>s.Length>0).Distinct().ToArray();
            target.__CsvSet_tags(arr);
        }

        if (row.TryGetValue("energyCost", out var v_energyCost))
        {
            if (v_energyCost == null) v_energyCost = string.Empty;
            if (float.TryParse(v_energyCost, out var parsed)) target.__CsvSet_energyCost(parsed);
        }

        if (row.TryGetValue("xpReward", out var v_xpReward))
        {
            if (v_xpReward == null) v_xpReward = string.Empty;
            if (int.TryParse(v_xpReward, out var parsed)) target.__CsvSet_xpReward(parsed);
        }

    }
#endif
}
}
