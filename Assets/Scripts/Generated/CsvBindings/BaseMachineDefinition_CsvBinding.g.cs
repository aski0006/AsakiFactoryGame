// <auto-generated />
#nullable enable
using UnityEditor;
using System;
using System.Collections.Generic;
using UnityEngine;
using System.Linq;
using Game.CSV;
namespace Game.Data.Definition.Machines {
internal static class CsvBinding_BaseMachineDefinition
{
    internal static readonly string[] Header = new[]{
        "id",
        "codeName",
        "displayName",
        "machineType",
        "size",
        "rotatable",
        "defaultRotation",
        "processingSpeedMultiplier",
        "singleQueue",
        "inputSlotCapacity",
        "outputSlotCapacity",
        "autoPullInputs",
        "autoPushOutputs",
        "requiresPower",
        "basePowerConsumption",
        "idleConsumesPower",
        "useWhitelist",
        "recipeWhitelistIds",
        "recipeBlacklistIds",
        "includeHandRecipes",
        "icon",
        "description",
        "prefab",
        "unlockTier",
        "unlockedByDefault",
        "tags",
        "sortOrder"
    };
    internal static readonly string[] Remarks = new[]{
        "唯一ID",
        "内部代码名",
        "显示名称",
        "机器类型",
        "占格尺寸(W;H)",
        "可旋转",
        "默认朝向",
        "处理速度倍率",
        "串行队列",
        "输入槽位数",
        "输出槽位数",
        "自动拉取",
        "自动推送",
        "需电力",
        "基础功耗",
        "空转耗电",
        "启用白名单",
        "白名单配方ID(;)",
        "黑名单配方ID(;)",
        "包含手搓配方",
        "图标引用",
        "描述",
        "预制体",
        "解锁层级",
        "默认解锁",
        "标签(分号;)",
        "排序权重"
    };
    internal static Dictionary<string,string> Export(BaseMachineDefinition def)
    {
        var d = new Dictionary<string,string>(StringComparer.OrdinalIgnoreCase);
        d["id"] = def.Id.ToString();
        d["codeName"] = def.CodeName ?? "";
        d["displayName"] = def.DisplayName ?? "";
        d["machineType"] = def.MachineType.ToString();
        {
            string __custom;
            if (CsvTypeConverterRegistry.TrySerialize(typeof(UnityEngine.Vector2Int), def.Size, out __custom))
                d["size"] = __custom ?? "";
            else
                d["size"] = def.Size != null ? def.Size.ToString() : "";
        }
        d["rotatable"] = def.Rotatable ? "true" : "false";
        d["defaultRotation"] = def.DefaultRotation.ToString();
        d["processingSpeedMultiplier"] = def.ProcessingSpeedMultiplier.ToString();
        d["singleQueue"] = def.SingleQueue ? "true" : "false";
        d["inputSlotCapacity"] = def.InputSlotCapacity.ToString();
        d["outputSlotCapacity"] = def.OutputSlotCapacity.ToString();
        d["autoPullInputs"] = def.AutoPullInputs ? "true" : "false";
        d["autoPushOutputs"] = def.AutoPushOutputs ? "true" : "false";
        d["requiresPower"] = def.RequiresPower ? "true" : "false";
        d["basePowerConsumption"] = def.BasePowerConsumption.ToString();
        d["idleConsumesPower"] = def.IdleConsumesPower ? "true" : "false";
        d["useWhitelist"] = def.UseWhitelist ? "true" : "false";
        if (def.RecipeWhitelistIds != null)
        {
            var arr = def.RecipeWhitelistIds;
            if (arr.Count == 0) d["recipeWhitelistIds"] = "";
            else {
                System.Text.StringBuilder __sb = new System.Text.StringBuilder();
                for (int __i = 0; __i < arr.Count; __i++)
                {
                    var __e = arr[__i];
                    string __s;
                    if (CsvTypeConverterRegistry.TrySerialize(typeof(System.Int32), __e, out __s))
                    {
                        if (__i > 0) __sb.Append(';');
                        __sb.Append(__s);
                    }
                    else
                    {
                        // 回退 ToString
                        if (__i > 0) __sb.Append(';');
                        __sb.Append(__e != null ? __e.ToString() : "");
                    }
                }
                d["recipeWhitelistIds"] = __sb.ToString();
            }
        }
        else d["recipeWhitelistIds"] = "";
        if (def.RecipeBlacklistIds != null)
        {
            var arr = def.RecipeBlacklistIds;
            if (arr.Count == 0) d["recipeBlacklistIds"] = "";
            else {
                System.Text.StringBuilder __sb = new System.Text.StringBuilder();
                for (int __i = 0; __i < arr.Count; __i++)
                {
                    var __e = arr[__i];
                    string __s;
                    if (CsvTypeConverterRegistry.TrySerialize(typeof(System.Int32), __e, out __s))
                    {
                        if (__i > 0) __sb.Append(';');
                        __sb.Append(__s);
                    }
                    else
                    {
                        // 回退 ToString
                        if (__i > 0) __sb.Append(';');
                        __sb.Append(__e != null ? __e.ToString() : "");
                    }
                }
                d["recipeBlacklistIds"] = __sb.ToString();
            }
        }
        else d["recipeBlacklistIds"] = "";
        d["includeHandRecipes"] = def.IncludeHandRecipes ? "true" : "false";
        {
            string __custom;
            if (CsvTypeConverterRegistry.TrySerialize(typeof(UnityEngine.Sprite), def.Icon, out __custom))
                d["icon"] = __custom ?? "";
            else
                d["icon"] = def.Icon != null ? def.Icon.ToString() : "";
        }
        d["description"] = def.Description ?? "";
        {
            string __custom;
            if (CsvTypeConverterRegistry.TrySerialize(typeof(UnityEngine.GameObject), def.Prefab, out __custom))
                d["prefab"] = __custom ?? "";
            else
                d["prefab"] = def.Prefab != null ? def.Prefab.ToString() : "";
        }
        d["unlockTier"] = def.UnlockTier.ToString();
        d["unlockedByDefault"] = def.UnlockedByDefault ? "true" : "false";
        d["tags"] = def.Tags != null ? string.Join(";", def.Tags) : "";
        d["sortOrder"] = def.SortOrder.ToString();
        return d;
    }
#if UNITY_EDITOR
    internal static void ImportInto(BaseMachineDefinition target, Dictionary<string,string> row, IAssetCsvResolver resolver, int lineIndex)
    {
        if (row.TryGetValue("id", out var v_id))
        {
            if (v_id == null) v_id = string.Empty;
            if (int.TryParse(v_id, out var parsed)) target.__CsvSet_id(parsed);
        }

        if (row.TryGetValue("codeName", out var v_codeName))
        {
            if (v_codeName == null) v_codeName = string.Empty;
            if(!string.IsNullOrEmpty(v_codeName)) target.__CsvSet_codeName(v_codeName);
        }

        if (row.TryGetValue("displayName", out var v_displayName))
        {
            if (v_displayName == null) v_displayName = string.Empty;
            if(!string.IsNullOrEmpty(v_displayName)) target.__CsvSet_displayName(v_displayName);
        }

        if (row.TryGetValue("machineType", out var v_machineType))
        {
            if (v_machineType == null) v_machineType = string.Empty;
            if (System.Enum.TryParse(typeof(Game.Data.Definition.Machines.MachineType), v_machineType, true, out var enumObj)) target.__CsvSet_machineType((Game.Data.Definition.Machines.MachineType)enumObj);
        }

        if (row.TryGetValue("size", out var v_size))
        {
            if (v_size == null) v_size = string.Empty;
            if (CsvTypeConverterRegistry.TryDeserialize(typeof(UnityEngine.Vector2Int), v_size, out var __boxed))
            {
                target.__CsvSet_size( (UnityEngine.Vector2Int)__boxed );
            }
            else
            {
                // 未找到转换器：忽略（可以在此加日志）
            }
        }

        if (row.TryGetValue("rotatable", out var v_rotatable))
        {
            if (v_rotatable == null) v_rotatable = string.Empty;
            target.__CsvSet_rotatable((v_rotatable.Equals("1") || v_rotatable.Equals("true", StringComparison.OrdinalIgnoreCase) || v_rotatable.Equals("yes", StringComparison.OrdinalIgnoreCase)));
        }

        if (row.TryGetValue("defaultRotation", out var v_defaultRotation))
        {
            if (v_defaultRotation == null) v_defaultRotation = string.Empty;
            if (int.TryParse(v_defaultRotation, out var parsed)) target.__CsvSet_defaultRotation(parsed);
        }

        if (row.TryGetValue("processingSpeedMultiplier", out var v_processingSpeedMultiplier))
        {
            if (v_processingSpeedMultiplier == null) v_processingSpeedMultiplier = string.Empty;
            if (float.TryParse(v_processingSpeedMultiplier, out var parsed)) target.__CsvSet_processingSpeedMultiplier(parsed);
        }

        if (row.TryGetValue("singleQueue", out var v_singleQueue))
        {
            if (v_singleQueue == null) v_singleQueue = string.Empty;
            target.__CsvSet_singleQueue((v_singleQueue.Equals("1") || v_singleQueue.Equals("true", StringComparison.OrdinalIgnoreCase) || v_singleQueue.Equals("yes", StringComparison.OrdinalIgnoreCase)));
        }

        if (row.TryGetValue("inputSlotCapacity", out var v_inputSlotCapacity))
        {
            if (v_inputSlotCapacity == null) v_inputSlotCapacity = string.Empty;
            if (int.TryParse(v_inputSlotCapacity, out var parsed)) target.__CsvSet_inputSlotCapacity(parsed);
        }

        if (row.TryGetValue("outputSlotCapacity", out var v_outputSlotCapacity))
        {
            if (v_outputSlotCapacity == null) v_outputSlotCapacity = string.Empty;
            if (int.TryParse(v_outputSlotCapacity, out var parsed)) target.__CsvSet_outputSlotCapacity(parsed);
        }

        if (row.TryGetValue("autoPullInputs", out var v_autoPullInputs))
        {
            if (v_autoPullInputs == null) v_autoPullInputs = string.Empty;
            target.__CsvSet_autoPullInputs((v_autoPullInputs.Equals("1") || v_autoPullInputs.Equals("true", StringComparison.OrdinalIgnoreCase) || v_autoPullInputs.Equals("yes", StringComparison.OrdinalIgnoreCase)));
        }

        if (row.TryGetValue("autoPushOutputs", out var v_autoPushOutputs))
        {
            if (v_autoPushOutputs == null) v_autoPushOutputs = string.Empty;
            target.__CsvSet_autoPushOutputs((v_autoPushOutputs.Equals("1") || v_autoPushOutputs.Equals("true", StringComparison.OrdinalIgnoreCase) || v_autoPushOutputs.Equals("yes", StringComparison.OrdinalIgnoreCase)));
        }

        if (row.TryGetValue("requiresPower", out var v_requiresPower))
        {
            if (v_requiresPower == null) v_requiresPower = string.Empty;
            target.__CsvSet_requiresPower((v_requiresPower.Equals("1") || v_requiresPower.Equals("true", StringComparison.OrdinalIgnoreCase) || v_requiresPower.Equals("yes", StringComparison.OrdinalIgnoreCase)));
        }

        if (row.TryGetValue("basePowerConsumption", out var v_basePowerConsumption))
        {
            if (v_basePowerConsumption == null) v_basePowerConsumption = string.Empty;
            if (float.TryParse(v_basePowerConsumption, out var parsed)) target.__CsvSet_basePowerConsumption(parsed);
        }

        if (row.TryGetValue("idleConsumesPower", out var v_idleConsumesPower))
        {
            if (v_idleConsumesPower == null) v_idleConsumesPower = string.Empty;
            target.__CsvSet_idleConsumesPower((v_idleConsumesPower.Equals("1") || v_idleConsumesPower.Equals("true", StringComparison.OrdinalIgnoreCase) || v_idleConsumesPower.Equals("yes", StringComparison.OrdinalIgnoreCase)));
        }

        if (row.TryGetValue("useWhitelist", out var v_useWhitelist))
        {
            if (v_useWhitelist == null) v_useWhitelist = string.Empty;
            target.__CsvSet_useWhitelist((v_useWhitelist.Equals("1") || v_useWhitelist.Equals("true", StringComparison.OrdinalIgnoreCase) || v_useWhitelist.Equals("yes", StringComparison.OrdinalIgnoreCase)));
        }

        if (row.TryGetValue("recipeWhitelistIds", out var v_recipeWhitelistIds))
        {
            if (v_recipeWhitelistIds == null) v_recipeWhitelistIds = string.Empty;
            if (string.IsNullOrWhiteSpace(v_recipeWhitelistIds)) {
                target.__CsvSet_recipeWhitelistIds(System.Array.Empty<System.Int32>());
            } else {
                var _parts = v_recipeWhitelistIds.Split(new[]{';'}, StringSplitOptions.RemoveEmptyEntries);
                var _list = new System.Collections.Generic.List<System.Int32>(_parts.Length);
                for (int __i = 0; __i < _parts.Length; __i++)
                {
                    var __token = _parts[__i].Trim();
                    if (CsvTypeConverterRegistry.TryDeserialize(typeof(System.Int32), __token, out var __obj))
                    {
                        _list.Add( (System.Int32)__obj );
                    }
                    else
                    {
                        // 尝试直接 Parse 数字到元素(若是基础数值)或忽略（可按需要扩展）
                        // 没有转换器则跳过
                    }
                }
                target.__CsvSet_recipeWhitelistIds(_list.ToArray());
            }
        }

        if (row.TryGetValue("recipeBlacklistIds", out var v_recipeBlacklistIds))
        {
            if (v_recipeBlacklistIds == null) v_recipeBlacklistIds = string.Empty;
            if (string.IsNullOrWhiteSpace(v_recipeBlacklistIds)) {
                target.__CsvSet_recipeBlacklistIds(System.Array.Empty<System.Int32>());
            } else {
                var _parts = v_recipeBlacklistIds.Split(new[]{';'}, StringSplitOptions.RemoveEmptyEntries);
                var _list = new System.Collections.Generic.List<System.Int32>(_parts.Length);
                for (int __i = 0; __i < _parts.Length; __i++)
                {
                    var __token = _parts[__i].Trim();
                    if (CsvTypeConverterRegistry.TryDeserialize(typeof(System.Int32), __token, out var __obj))
                    {
                        _list.Add( (System.Int32)__obj );
                    }
                    else
                    {
                        // 尝试直接 Parse 数字到元素(若是基础数值)或忽略（可按需要扩展）
                        // 没有转换器则跳过
                    }
                }
                target.__CsvSet_recipeBlacklistIds(_list.ToArray());
            }
        }

        if (row.TryGetValue("includeHandRecipes", out var v_includeHandRecipes))
        {
            if (v_includeHandRecipes == null) v_includeHandRecipes = string.Empty;
            target.__CsvSet_includeHandRecipes((v_includeHandRecipes.Equals("1") || v_includeHandRecipes.Equals("true", StringComparison.OrdinalIgnoreCase) || v_includeHandRecipes.Equals("yes", StringComparison.OrdinalIgnoreCase)));
        }

        if (row.TryGetValue("icon", out var v_icon))
        {
            if (v_icon == null) v_icon = string.Empty;
            if (CsvTypeConverterRegistry.TryDeserialize(typeof(UnityEngine.Sprite), v_icon, out var __boxed))
            {
                target.__CsvSet_icon( (UnityEngine.Sprite)__boxed );
            }
            else
            {
                // 未找到转换器：忽略（可以在此加日志）
            }
        }

        if (row.TryGetValue("description", out var v_description))
        {
            if (v_description == null) v_description = string.Empty;
            if(!string.IsNullOrEmpty(v_description)) target.__CsvSet_description(v_description);
        }

        if (row.TryGetValue("prefab", out var v_prefab))
        {
            if (v_prefab == null) v_prefab = string.Empty;
            if (CsvTypeConverterRegistry.TryDeserialize(typeof(UnityEngine.GameObject), v_prefab, out var __boxed))
            {
                target.__CsvSet_prefab( (UnityEngine.GameObject)__boxed );
            }
            else
            {
                // 未找到转换器：忽略（可以在此加日志）
            }
        }

        if (row.TryGetValue("unlockTier", out var v_unlockTier))
        {
            if (v_unlockTier == null) v_unlockTier = string.Empty;
            if (int.TryParse(v_unlockTier, out var parsed)) target.__CsvSet_unlockTier(parsed);
        }

        if (row.TryGetValue("unlockedByDefault", out var v_unlockedByDefault))
        {
            if (v_unlockedByDefault == null) v_unlockedByDefault = string.Empty;
            target.__CsvSet_unlockedByDefault((v_unlockedByDefault.Equals("1") || v_unlockedByDefault.Equals("true", StringComparison.OrdinalIgnoreCase) || v_unlockedByDefault.Equals("yes", StringComparison.OrdinalIgnoreCase)));
        }

        if (row.TryGetValue("tags", out var v_tags))
        {
            if (v_tags == null) v_tags = string.Empty;
            var arr = string.IsNullOrWhiteSpace(v_tags)
                ? System.Array.Empty<string>()
                : v_tags.Split(new[]{';'}, StringSplitOptions.RemoveEmptyEntries)
                    .Select(s=>s.Trim()).Where(s=>s.Length>0).Distinct().ToArray();
            target.__CsvSet_tags(arr);
        }

        if (row.TryGetValue("sortOrder", out var v_sortOrder))
        {
            if (v_sortOrder == null) v_sortOrder = string.Empty;
            if (int.TryParse(v_sortOrder, out var parsed)) target.__CsvSet_sortOrder(parsed);
        }

    }
#endif
}
}
