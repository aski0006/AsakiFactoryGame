// <auto-generated />
#if UNITY_EDITOR
namespace Game.Data.Definition.Machines {
public partial class BaseMachineDefinition 
{
    internal void __CsvSet_id(System.Int32 v) => id = v;
    internal void __CsvSet_codeName(System.String v) => codeName = v;
    internal void __CsvSet_displayName(System.String v) => displayName = v;
    internal void __CsvSet_machineType(Game.Data.Definition.Machines.MachineType v) => machineType = v;
    internal void __CsvSet_size(UnityEngine.Vector2Int v) => size = v;
    internal void __CsvSet_rotatable(System.Boolean v) => rotatable = v;
    internal void __CsvSet_defaultRotation(System.Int32 v) => defaultRotation = v;
    internal void __CsvSet_processingSpeedMultiplier(System.Single v) => processingSpeedMultiplier = v;
    internal void __CsvSet_singleQueue(System.Boolean v) => singleQueue = v;
    internal void __CsvSet_inputSlotCapacity(System.Int32 v) => inputSlotCapacity = v;
    internal void __CsvSet_outputSlotCapacity(System.Int32 v) => outputSlotCapacity = v;
    internal void __CsvSet_autoPullInputs(System.Boolean v) => autoPullInputs = v;
    internal void __CsvSet_autoPushOutputs(System.Boolean v) => autoPushOutputs = v;
    internal void __CsvSet_requiresPower(System.Boolean v) => requiresPower = v;
    internal void __CsvSet_basePowerConsumption(System.Single v) => basePowerConsumption = v;
    internal void __CsvSet_idleConsumesPower(System.Boolean v) => idleConsumesPower = v;
    internal void __CsvSet_useWhitelist(System.Boolean v) => useWhitelist = v;
    internal void __CsvSet_recipeWhitelistIds(System.Int32[] v) => recipeWhitelistIds = v;
    internal void __CsvSet_recipeBlacklistIds(System.Int32[] v) => recipeBlacklistIds = v;
    internal void __CsvSet_includeHandRecipes(System.Boolean v) => includeHandRecipes = v;
    internal void __CsvSet_icon(UnityEngine.Sprite v) => icon = v;
    internal void __CsvSet_description(System.String v) => description = v;
    internal void __CsvSet_prefab(UnityEngine.GameObject v) => prefab = v;
    internal void __CsvSet_unlockTier(System.Int32 v) => unlockTier = v;
    internal void __CsvSet_unlockedByDefault(System.Boolean v) => unlockedByDefault = v;
    internal void __CsvSet_tags(System.String[] v) => tags = v;
    internal void __CsvSet_sortOrder(System.Int32 v) => sortOrder = v;
}
}
#endif
